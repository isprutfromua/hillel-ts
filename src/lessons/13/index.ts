// –£ –Ω–∞—Å —î –ø—Ä–æ—Å—Ç–∞ —Å–∏—Å—Ç–µ–º–∞ –∫–µ—Ä—É–≤–∞–Ω–Ω—è –∑–∞–¥–∞—á–∞–º–∏.
// –¢—Ä–µ–±–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –ø–∞—Ç–µ—Ä–Ω –°–ø–æ—Å—Ç–µ—Ä—ñ–≥–∞—á –º–æ–¥–∏—Ñ—ñ–∫—É–≤–∞—Ç–∏ –∫–æ–¥ —Ç–∞–∫–∏–º —á–∏–Ω–æ–º,
// —â–æ–± –∫–ª–∞—Å —é–∑–µ—Ä –º—ñ–≥ —Ä–µ–∞–≥—É–≤–∞–≤ –Ω–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ—ó –∑–∞–¥–∞—á—ñ –Ω–∞ –¥–æ—à–∫—É.
// –Ø–∫—â–æ assigneeId —Ç–∞ user id –∑–±—ñ–≥–∞—é—Ç—å—Å—è, —Ç–æ –∫–ª–∞—Å user –º–∞—î —É—Å—Ç–∞–Ω–æ–≤–ª—é–≤–∞—Ç–∏ –∑–∞–¥–∞—á—É —É #activeTask.

// * –î–æ–¥–∞—Ç–∫–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è:
// –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –ø–∞—Ç–µ—Ä–Ω —Å—Ç—Ä–∞—Ç–µ–≥—ñ—è, —Ä–æ–∑—à–∏—Ä–∏—Ç–∏ –ª–æ–≥—ñ–∫—É, –¥–æ–¥–∞–≤—à–∏ –∫—ñ–ª—å–∫–∞
// —Ä—ñ–∑–Ω–∏—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ñ–≤ –Ω–æ—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ–π: –µ–º–µ–π–ª, —Ç–µ–ª–µ–≥—Ä–∞–º, —Å–º—Å.
//
// –í–∏–±—Ä–∞–Ω–∏–π –ü—Ä–æ–≤–∞–π–¥–µ—Ä —Ç–∞–∫–æ–∂ –ø–æ–≤–∏–Ω–µ–Ω —Ä–µ–∞–≥—É–≤–∞—Ç–∏ –Ω–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∑–∞–¥–∞—á—ñ –Ω–∞
// –¥–æ—à–∫—É —Ç–∞ –≤–∏–≤–æ–¥–∏—Ç–∏—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∑–∞–¥–∞—á—É —Ç–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä.
//
// –ù–∞–ø—Ä–∏–∫–ª–∞–¥: "EMAIL: task MyTask added to board"

// observer pattern
interface ISubscriber<T = unknown> {
  update(value: T): void
}
interface ISubscribable<T extends ISubscriber> {
  addSubscriber(subscriber: T): void

  removeSubscriber(subscriber: T): void

  notifySubscribers(): void
}
// strategy pattern
interface INotifyProvider {
  notify(data: string): void
}
interface INotificationStrategy {
  setNotificationStrategy(provider: INotifyProvider): void
}

export class SMSNotifier implements INotifyProvider {
  notify(data: string) {
    console.log("You've got an SMS message: ", data)
  }
}
export class TelegramNotifier implements INotifyProvider {
  notify(data: string) {
    console.log("You've got an Telegram message: ", data)
  }
}
export class EmailNotifier implements INotifyProvider {
  notify(data: string) {
    console.log("You've got an email message: ", data)
  }
}
export class Task {
  constructor(
    public title: string,
    public description: string,
    public assigneeId: string,
  ) {}
}
export class TaskBoard implements ISubscribable<User>, INotificationStrategy {
  #tasks: Task[] = []
  #subscribers: Set<User> = new Set()
  // default provider, can be passed into constcutor, I guess
  #notificationProvider: INotifyProvider = new EmailNotifier()

  get tasks() {
    return this.#tasks
  }

  sendNotifications(task: Task) {
    const message = this.formatMessageForSubscribers(task)
    this.#notificationProvider.notify(message)
  }

  addTask(task: Task): void {
    this.#tasks.push(task)
    this.notifySubscribers()
    this.sendNotifications(task)
  }

  addSubscriber(user: User) {
    this.#subscribers.add(user)
  }

  removeSubscriber(user: User) {
    this.#subscribers.delete(user)
  }

  formatMessageForSubscribers(task: Task) {
    return `Task with ID: ${task.assigneeId} has been added to board. Enjoy üôÇ`
  }

  notifySubscribers() {
    const lastTask = this.#tasks.at(-1)

    if (!lastTask) return

    this.#subscribers.forEach(subscriber => {
      if (subscriber.id === lastTask.assigneeId) {
        subscriber.update(lastTask)
      }
    })
  }

  setNotificationStrategy(provider: INotifyProvider = new EmailNotifier()) {
    this.#notificationProvider = provider
  }
}
export class User implements ISubscriber<Task> {
  #activeTask?: Task
  name: string
  readonly id: string

  constructor(name: string) {
    this.name = name
    this.id = 'id' + Math.random().toString(16).slice(2)
  }

  get activeTask(): Task | undefined {
    return this.#activeTask
  }

  update(task: Task) {
    this.#activeTask = task
  }
}
